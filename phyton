import sqlite3
from Crypto.Cipher import AES
import os

# Función para encriptar datos
def encrypt_data(data, key):
    cipher = AES.new(key, AES.MODE_EAX)
    nonce = cipher.nonce
    ciphertext, tag = cipher.encrypt_and_digest(data.encode('utf-8'))
    return nonce, ciphertext, tag

# Función para desencriptar datos
def decrypt_data(nonce, ciphertext, tag, key):
    cipher = AES.new(key, AES.MODE_EAX, nonce=nonce)
    plaintext = cipher.decrypt_and_verify(ciphertext, tag)
    return plaintext.decode('utf-8')

# Función para inicializar la base de datos
def initialize_database():
    conn = sqlite3.connect('privacy_preferences.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS users
                 (id INTEGER PRIMARY KEY AUTOINCREMENT, wallet_address TEXT UNIQUE, encryption_key BLOB)''')
    conn.commit()
    conn.close()

# Función para agregar un nuevo usuario a la base de datos
def add_user(wallet_address, encryption_key):
    conn = sqlite3.connect('privacy_preferences.db')
    c = conn.cursor()
    c.execute("INSERT INTO users (wallet_address, encryption_key) VALUES (?, ?)", (wallet_address, encryption_key))
    conn.commit()
    conn.close()

# Función para obtener la clave de encriptación de un usuario
def get_encryption_key(wallet_address):
    conn = sqlite3.connect('privacy_preferences.db')
    c = conn.cursor()
    c.execute("SELECT encryption_key FROM users WHERE wallet_address=?", (wallet_address,))
    key = c.fetchone()
    conn.close()
    return key[0] if key else None

# Función para que el usuario configure sus preferencias de privacidad
def set_privacy_preferences(wallet_address, preferences):
    conn = sqlite3.connect('privacy_preferences.db')
    c = conn.cursor()
    c.execute("UPDATE users SET privacy_preferences=? WHERE wallet_address=?", (preferences, wallet_address))
    conn.commit()
    conn.close()

# Función para que el usuario recupere sus preferencias de privacidad
def get_privacy_preferences(wallet_address):
    conn = sqlite3.connect('privacy_preferences.db')
    c = conn.cursor()
    c.execute("SELECT privacy_preferences FROM users WHERE wallet_address=?", (wallet_address,))
    preferences = c.fetchone()
    conn.close()
    return preferences[0] if preferences else None

# Inicializar la base de datos
initialize_database()

# Ejemplo de uso
wallet_address = "ejemplo_direccion_billetera"
encryption_key = os.urandom(16)  # Clave de encriptación aleatoria (16 bytes)
add_user(wallet_address, encryption_key)

# Establecer las preferencias de privacidad del usuario
preferences = {"address": False, "amount": True}  # El usuario no comparte la dirección de la billetera, pero sí el monto de la transacción
set_privacy_preferences(wallet_address, preferences)

# Recuperar las preferencias de privacidad del usuario
retrieved_preferences = get_privacy_preferences(wallet_address)
print("Preferencias de privacidad recuperadas:", retrieved_preferences)
